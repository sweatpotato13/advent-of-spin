// Generated by `wit-bindgen` 0.32.0. DO NOT EDIT!
// Options used:
//   * additional derives ["serde::Serialize", "serde::Deserialize", "Hash", "Clone", "PartialEq", "Eq"]
#[allow(dead_code)]
pub mod local {
  #[allow(dead_code)]
  pub mod scoring {
    #[allow(dead_code, clippy::all)]
    pub mod scoring {
      #[used]
      #[doc(hidden)]
      static __FORCE_SECTION_REF: fn() =
      super::super::super::__link_custom_section_describing_imports;
      
      #[allow(unused_unsafe, clippy::all)]
      pub fn scoring(name: &str,) -> u32{
        unsafe {
          let vec0 = name;
          let ptr0 = vec0.as_ptr().cast::<u8>();
          let len0 = vec0.len();

          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "local:scoring/scoring")]
          extern "C" {
            #[link_name = "scoring"]
            fn wit_import(_: *mut u8, _: usize, ) -> i32;
          }

          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: *mut u8, _: usize, ) -> i32{ unreachable!() }
          let ret = wit_import(ptr0.cast_mut(), len0);
          ret as u32
        }
      }

    }

  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.32.0:spin-deps:deps@0.1.0:deps:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 210] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07X\x01A\x02\x01A\x02\x01\
B\x02\x01@\x01\x04names\0y\x04\0\x07scoring\x01\0\x03\0\x15local:scoring/scoring\
\x05\0\x04\0\x19spin-deps:deps/deps@0.1.0\x04\0\x0b\x0a\x01\0\x04deps\x03\0\0\0G\
\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.217.0\x10wit-bindgen\
-rust\x060.32.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

